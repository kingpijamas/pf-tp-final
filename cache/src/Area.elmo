Elm.Area = Elm.Area || {};
Elm.Area.make = function (elm) {
   elm.Area = elm.Area || {};
   if (elm.Area.values)
   return elm.Area.values;
   var N = Elm.Native,
   _N = N.Utils.make(elm),
   _L = N.List.make(elm),
   _E = N.Error.make(elm),
   _J = N.JavaScript.make(elm),
   $moduleName = "Area";
   var Text = Elm.Text.make(elm);
   var Text = Elm.Text.make(elm);
   var Basics = Elm.Basics.make(elm);
   var Signal = Elm.Signal.make(elm);
   var List = Elm.List.make(elm);
   var Maybe = Elm.Maybe.make(elm);
   var Time = Elm.Time.make(elm);
   var Prelude = Elm.Prelude.make(elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(elm);
   var Color = Elm.Color.make(elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(elm);
   var Matrix = Elm.Matrix.make(elm);
   var Either = Elm.Either.make(elm);
   var Directions = Elm.Directions.make(elm);
   var _op = {};
   var getY = function (coords) {
      return Matrix.col(coords);
   };
   var getX = function (coords) {
      return Matrix.row(coords);
   };
   var coords = Matrix.position;
   var asCoords = function (dir) {
      return function () {
         switch (dir.ctor)
         {case "E":
            return Maybe.Just(A2(coords,
              0,
              1));
            case "N":
            return Maybe.Just(A2(coords,
              -1,
              0));
            case "NE":
            return Maybe.Just(A2(coords,
              -1,
              1));
            case "NW":
            return Maybe.Just(A2(coords,
              -1,
              -1));
            case "S":
            return Maybe.Just(A2(coords,
              1,
              0));
            case "SE":
            return Maybe.Just(A2(coords,
              1,
              1));
            case "SW":
            return Maybe.Just(A2(coords,
              1,
              -1));
            case "W":
            return Maybe.Just(A2(coords,
              0,
              -1));}
         return Maybe.Nothing;
      }();
   };
   var add = F2(function (a,b) {
      return A2(coords,
      getX(a) + getX(b),
      getY(a) + getY(b));
   });
   var addDir = F2(function (a,
   dir) {
      return function () {
         var _case1 = asCoords(dir);
         switch (_case1.ctor)
         {case "Just":
            return Maybe.Just(A2(add,
              a,
              _case1._0));
            case "Nothing":
            return Maybe.Nothing;}
         _E.Case($moduleName,
         "between lines 47 and 49");
      }();
   });
   var inDir = F2(function (f,
   dSig) {
      return function () {
         var from = dSig.who.location;
         var proposed = A2(addDir,
         from,
         dSig.targetDir);
         return function () {
            switch (proposed.ctor)
            {case "Just":
               return Maybe.Just(f({_: {}
                                   ,target: proposed._0
                                   ,who: dSig.who}));
               case "Nothing":
               return Maybe.Nothing;}
            _E.Case($moduleName,
            "between lines 59 and 61");
         }();
      }();
   });
   var LocationSignal = F2(function (a,
   b) {
      return {_: {}
             ,target: b
             ,who: a};
   });
   var Locatable = F3(function (a,
   b,
   c) {
      return _N.insert("location",
      b,
      _N.insert("area",a,c));
   });
   var DirectionalSignal = F2(function (a,
   b) {
      return {_: {}
             ,targetDir: b
             ,who: a};
   });
   elm.Area.values = {_op: _op
                     ,coords: coords
                     ,getX: getX
                     ,getY: getY
                     ,asCoords: asCoords
                     ,add: add
                     ,addDir: addDir
                     ,inDir: inDir
                     ,Locatable: Locatable
                     ,LocationSignal: LocationSignal
                     ,DirectionalSignal: DirectionalSignal};
   return elm.Area.values;
};